// automatically generated by the FlatBuffers compiler, do not modify
// @generated
extern crate alloc;
extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
use alloc::boxed::Box;
use alloc::string::{String, ToString};
use alloc::vec::Vec;
use core::cmp::Ordering;
use core::mem;
pub enum SingleBlockOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SingleBlock<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SingleBlock<'a> {
    type Inner = SingleBlock<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> SingleBlock<'a> {
    pub const VT_HEADER: flatbuffers::VOffsetT = 4;
    pub const VT_TRANSACTIONS: flatbuffers::VOffsetT = 6;
    pub const VT_RECEIPTS: flatbuffers::VOffsetT = 8;
    pub const VT_LOGS: flatbuffers::VOffsetT = 10;

    pub const fn get_fully_qualified_name() -> &'static str {
        "SingleBlock"
    }

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        SingleBlock { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args SingleBlockArgs<'args>,
    ) -> flatbuffers::WIPOffset<SingleBlock<'bldr>> {
        let mut builder = SingleBlockBuilder::new(_fbb);
        if let Some(x) = args.logs {
            builder.add_logs(x);
        }
        if let Some(x) = args.receipts {
            builder.add_receipts(x);
        }
        if let Some(x) = args.transactions {
            builder.add_transactions(x);
        }
        if let Some(x) = args.header {
            builder.add_header(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn header(&self) -> Option<BlockHeader<'a>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<BlockHeader>>(SingleBlock::VT_HEADER, None)
        }
    }
    #[inline]
    pub fn transactions(
        &self,
    ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Transaction<'a>>>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Transaction>>,
            >>(SingleBlock::VT_TRANSACTIONS, None)
        }
    }
    #[inline]
    pub fn receipts(
        &self,
    ) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TransactionReceipt<'a>>>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TransactionReceipt>>,
            >>(SingleBlock::VT_RECEIPTS, None)
        }
    }
    #[inline]
    pub fn logs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Log<'a>>>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab.get::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Log>>,
            >>(SingleBlock::VT_LOGS, None)
        }
    }
}

impl flatbuffers::Verifiable for SingleBlock<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<BlockHeader>>(
                "header",
                Self::VT_HEADER,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Transaction>>,
            >>("transactions", Self::VT_TRANSACTIONS, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<TransactionReceipt>>,
            >>("receipts", Self::VT_RECEIPTS, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Log>>,
            >>("logs", Self::VT_LOGS, false)?
            .finish();
        Ok(())
    }
}
pub struct SingleBlockArgs<'a> {
    pub header: Option<flatbuffers::WIPOffset<BlockHeader<'a>>>,
    pub transactions: Option<
        flatbuffers::WIPOffset<
            flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Transaction<'a>>>,
        >,
    >,
    pub receipts: Option<
        flatbuffers::WIPOffset<
            flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<TransactionReceipt<'a>>>,
        >,
    >,
    pub logs: Option<
        flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Log<'a>>>>,
    >,
}
impl<'a> Default for SingleBlockArgs<'a> {
    #[inline]
    fn default() -> Self {
        SingleBlockArgs {
            header: None,
            transactions: None,
            receipts: None,
            logs: None,
        }
    }
}

pub struct SingleBlockBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SingleBlockBuilder<'a, 'b> {
    #[inline]
    pub fn add_header(&mut self, header: flatbuffers::WIPOffset<BlockHeader<'b>>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<BlockHeader>>(
                SingleBlock::VT_HEADER,
                header,
            );
    }
    #[inline]
    pub fn add_transactions(
        &mut self,
        transactions: flatbuffers::WIPOffset<
            flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<Transaction<'b>>>,
        >,
    ) {
        self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
            SingleBlock::VT_TRANSACTIONS,
            transactions,
        );
    }
    #[inline]
    pub fn add_receipts(
        &mut self,
        receipts: flatbuffers::WIPOffset<
            flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<TransactionReceipt<'b>>>,
        >,
    ) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(SingleBlock::VT_RECEIPTS, receipts);
    }
    #[inline]
    pub fn add_logs(
        &mut self,
        logs: flatbuffers::WIPOffset<
            flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<Log<'b>>>,
        >,
    ) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(SingleBlock::VT_LOGS, logs);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SingleBlockBuilder<'a, 'b> {
        let start = _fbb.start_table();
        SingleBlockBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<SingleBlock<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for SingleBlock<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("SingleBlock");
        ds.field("header", &self.header());
        ds.field("transactions", &self.transactions());
        ds.field("receipts", &self.receipts());
        ds.field("logs", &self.logs());
        ds.finish()
    }
}
