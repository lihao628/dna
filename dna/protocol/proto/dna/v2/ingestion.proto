// Ingestion <-> DNA server
//
// The goal of this service is to provide a view over ingested data to clients.
// The server will stream data changes to the client, allowing the client to
// know what data is available without having to access the data itself.
//
// Roughly speaking, the server needs to track the following:
//
// - The most recent sealed segment group.
// - The most recent segments that are not part of a sealed group yet.
// - The most recent blocks that are not part of a full segment yet.
//
// The following data is stored remotely (AWS S3, Azure Blob, etc.):
//
// - Sealed segment groups.
// - Segments (all).
//
// The following data is stored locally on the DNA server, either in memory
// or on disk:
//
// - most recent segment group.
// - blocks that are not part of a segment yet.
syntax = "proto3";

package dna.v2.ingestion;

import "v2/common.proto";

service Ingestion {
  // Subscribe to data changes.
  rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse);
}

message SubscribeRequest {}

message SubscribeResponse {
  oneof message {
    Snapshot snapshot = 1;
    StateChanged state_changed = 2;
    BlockIngested block_ingested = 3;
    Invalidate invalidate = 4;
  }
}

// Data snapshot, the starting point to rebuild the DNA state.
message Snapshot {
  // Snapshot revision.
  uint64 revision = 1;
  // Segment options.
  SegmentOptions segment_options = 2;
  // Ingestion state.
  IngestionState ingestion = 3;
}

message SegmentOptions {
  // Segment size, in blocks.
  uint32 segment_size = 1;
  // Group size, in segments.
  uint32 group_size = 2;
}

message IngestionState {
  // First block number in the snapshot.
  uint64 first_block_number = 1;
  // Number of sealed groups ingested.
  uint32 group_count = 2;
  // Number of segments not yet sealed.
  uint32 extra_segment_count = 3;
}

message StateChanged {
  // New ingestion state.
  IngestionState new_state = 1;
  // New finalized block cursor.
  dna.v2.common.Cursor finalized = 2;
  // Blocks that can be safely removed because they are now included in a
  // segment.
  repeated dna.v2.common.Cursor removed_cursors = 3;
}

message BlockIngested {
  dna.v2.common.Cursor cursor = 1;
  bytes data = 2;
}

// Invalidate all blocks after the given block number.
message Invalidate {}
